                                  jvm

This is the implementation of a simple Java Virtual Machine.  This is
the final project of the first semester of 2021 of the Basic Software
course of the Computer Science department of the University of Brasilia.

The following tools are implemented:
• javap(1): Disassembles one or more class files.
• java(1):  Launches a Java application.

§ Hacks

The class_read() routine uses setjmp(3)/longjmp(3) to handle exceptions.
Routines called by it can longjmp(3) back to class_read, which will free
the class structure it was constructing.  However, those routines called
by class_read() can allocate memory, which will be lost after longjmping
back to class_read.

To solve that, I wrapped malloc(3) in a function that push the allocated
pointer on a global stack.  This pointer is popped when the function can
successfully return it; but, when an error occurs, longjmp moves control
back to class_read(), which will free every pointer on this stack.


§ See Also

The Java® Virtual Machine Specification: Java SE 8Edition,
by Tim Lindholm, Frank Yellin, Gilad Bracha, Alex Buckley,
Addison-Wesley, 2014.
ISBN: 978-0-13-390590-8.
https://docs.oracle.com/javase/specs/jvms/se8/html/


§ License

This software is in the public domain and is provided AS IS, with NO WARRANTY.
